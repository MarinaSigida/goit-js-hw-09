{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,KAAMJ,SAASC,cAAc,SA0C/B,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAhDPT,EAAKM,KAAKU,iBAAiB,UAOH,SAAEC,GACxBA,EAAMC,iBAEN,IAAIC,EAAQC,SAASpB,EAAKC,WAAWoB,OACjCC,EAAOF,SAASpB,EAAKI,UAAUiB,OAC/BE,EAASH,SAASpB,EAAKK,YAAYgB,OAEvC,GAAIC,EAAO,GAAKH,EAAQ,GAAKI,GAAU,EAIrC,YAHAC,EAAA1B,GAAS2B,OAAOC,QACb,gCAKL,IAAK,IAAIC,EAAI,EAAGA,GAAKJ,EAAQI,GAAK,EAChCpB,EAAcoB,EAAGR,GACdS,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBe,EAAA1B,GAAS2B,OAAOK,QACd,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAGjDuB,OAAM,SAAAH,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBe,EAAA1B,GAAS2B,OAAOC,QACd,sBAAuCK,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAInDU,GAASG,EAEXL,EAAMgB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  delayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('form'),\n};\n\nrefs.form.addEventListener('submit', generatePromises);\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay)\n// стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй\n// номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay),\n// введену користувачем, і крок (step).\n\nfunction generatePromises(event) {\n  event.preventDefault();\n\n  let delay = parseInt(refs.delayInput.value);\n  let step = parseInt(refs.stepInput.value);\n  let amount = parseInt(refs.amountInput.value);\n\n  if (step < 0 || delay < 0 || amount <= 0) {\n    Notiflix.Notify.failure(\n      `❌ Please enter valid numbers`\n    );\n    return;\n  };\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    delay += step;\n  }\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n//  який виконується або відхиляється через delay часу.\n//  Значенням промісу повинен бути об'єкт, в якому будуть властивості position\n//   і delay зі значеннями однойменних параметрів.\n//  Використовуй початковий код функції для вибору того, що потрібно зробити\n//  з промісом - виконати або відхилити.\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","delayInput","document","querySelector","stepInput","amountInput","form","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","delay1","parseInt","value","step","amount","$parcel$interopDefault","Notify","failure","i","then","param","success","concat","catch","currentTarget","reset"],"version":3,"file":"03-promises.0ef9a2ff.js.map"}
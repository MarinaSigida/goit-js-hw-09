{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,KAAMJ,SAASC,cAAc,SA8B/B,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IApCPT,EAAKM,KAAKU,iBAAiB,UAOH,SAAEC,GACxBA,EAAMC,iBAEN,IADA,IAAIC,EAAQC,SAASpB,EAAKC,WAAWoB,OAC5BC,EAAI,EAAGA,GAAKF,SAASpB,EAAKK,YAAYgB,OAAQC,GAAK,EAC1Df,EAAce,EAAGH,GACdI,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUC,EAAKe,EAALf,MACjBgB,EAAA3B,GAAS4B,OAAOC,QACd,uBAAwCC,OAAfpB,EAAS,QAAYoB,OAANnB,EAAM,M,IAGjDoB,OAAM,SAAAL,G,IAAGhB,EAAQgB,EAARhB,SAAUC,EAAKe,EAALf,MAClBgB,EAAA3B,GAAS4B,OAAOI,QACd,sBAAuCF,OAAfpB,EAAS,QAAYoB,OAANnB,EAAM,M,IAInDU,GAASC,SAASpB,EAAKI,UAAUiB,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  delayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('form'),\n};\n\nrefs.form.addEventListener('submit', generatePromises);\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay)\n// стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй\n// номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay),\n// введену користувачем, і крок (step).\n\nfunction generatePromises(event) {\n  event.preventDefault();\n  let delay = parseInt(refs.delayInput.value);\n  for (let i = 1; i <= parseInt(refs.amountInput.value); i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    delay += parseInt(refs.stepInput.value);\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n//  який виконується або відхиляється через delay часу.\n//  Значенням промісу повинен бути об'єкт, в якому будуть властивості position\n//   і delay зі значеннями однойменних параметрів.\n//  Використовуй початковий код функції для вибору того, що потрібно зробити\n//  з промісом - виконати або відхилити.\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","delayInput","document","querySelector","stepInput","amountInput","form","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","delay1","parseInt","value","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.3cece3ee.js.map"}